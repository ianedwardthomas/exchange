version: '2'


volumes:
    # This magic line creates a named volume for sharing across containers.
    # It has no defined location on the host system (real location is obscure).
    scratch:

services:

    # Reverse proxy out in front of exchange and geoserver, e.g. for CORS
    proxy:
        container_name: proxy
        image: nginx
        # see docker/nginx/Dockerfile
        # The only change from upstream is to add a section to the nginx config
        build: ./docker/nginx
        restart: on-failure
        # proxy needs hostnames which resolve to running exchange and geoserver
        # containers, so it can proxy to them
        links:
            - exchange
            - geoserver
        depends_on:
            - exchange
            - geoserver
        ports:
            - "80:80"
            - "443:443"
            - "8080:8080"

    # Database for use by Django, Celery and GeoServer
    database:
        container_name: database
        image: postgres
        # see docker/postgres/Dockerfile
        # adds in an initialization script for Exchange-specific requirements
        # also bakes in the initialization to avoid doing it at boot time
        build: ./docker/postgres
        restart: on-failure
        volumes:
            # experimental
            - ./dbdata:/var/lib/postgresql/data

    # Message queue receives tasks from django to be consumed by celery worker
    queue:
        container_name: queue
        # Not customized
        image: rabbitmq:3.6
        restart: on-failure


    # Search engine
    search:
        container_name: search
        # Not customized
        image: elasticsearch:1.7
        # ports:
        #     - "9200"

    # Useful thing
    geoserver:
        container_name: geoserver
        image: geoserver
        # see docker/geoserver/Dockerfile
        # This modifies a tomcat image using JRE 8 to add and configure an
        # instance of GeoServer from the magic WAR file Exchange needs.
        build:
            context: ./docker/geoserver
            args:
                GEOIP: $GEOIP
        # ports:
        #     # 8080 is the traditional HTTP port baked into server.xml
        #     - "8080"
        links:
            - database
        depends_on:
            - database
        volumes:
            - scratch:/scratch
        restart: on-failure


    # Django app which presents an interface and ties everything else together
    exchange:
        env_file: .env
        container_name: exchange
        image: exchange
        # see ./Dockerfile which defines the whole setup
        build: .
        depends_on:
            - database
            - queue
            - geoserver
        restart: on-failure
        links:
            - database
            - queue
            - geoserver
        environment:
            - GEOIP=$GEOIP

        # Code in volumes shared with host, so edits are immediately visible.
        volumes:
            - scratch:/scratch

            # Add a MapLoom home
            - $MAPLOOM_HOME:/mnt/maploom:ro

            # Ideally, all volumes shared with host are mounted read-only.
            # But we have to pip install -e /mnt/geonode to ensure GeoNode's
            # dependencies are all installed per its setup.py.
            # And pip insists on writing its .egg-info to the source directory.
            # 'python setup.py develop' might be a workaround if GeoNode's
            # setup.py used setuptools, but it doesn't so that fails.
            - $GEONODE_HOME:/mnt/geonode

            # Exchange code that dev will presumably want to change.
            - $EXCHANGE_HOME:/mnt/exchange:rw

            # Example of how to mount something else from here.
            # - $HOME/stuff/django-osgeo-importer:/mnt/django-osgeo-importer:ro


        # ports:
        expose:
             # Django at /
             - "80"
             # export ssl version as well.
             - "443"

    # worker process which does "background" work for the django app
    worker:
        container_name: worker
        # shares the container image with exchange to stay synced up;
        # otherwise we may get signature mismatches etc. with celery
        image: exchange
        # see ./Dockerfile
        build: .
        links:
            - queue
            - database
            - geoserver
            - search
        # Inherit volume specifications from the exchange container
        volumes_from:
            - exchange
        depends_on:
            - proxy
            - database
            - geoserver
            - search
        environment:
            - GEOIP=$GEOIP
        command: /root/worker.sh
        # celery worker brought back up if it goes down.
        restart: on-failure


    # This memcached is not used by anything.
    cache:
        container_name: cache
        image: memcached
